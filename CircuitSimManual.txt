
------------------------------------------------------------------------------	
CircuitSim Manual
David Cline
Last updated: June 13, 2017
------------------------------------------------------------------------------

Introduction

CircuitSim is a program that allows you to design and test the logic of 
a digital circuit.  The circuits are designed using simple text files that 
define the inputs, outputs and logic of a circuit.  The logic of a circuit 
can be defined either by using a truth table, or by specifying a set of 
subcircuits and their connections.

The output of the program is either to run the circuit on an input,
show a truth table, or to run a set of test cases given in another file.

------------------------------------------------------------------------------

Running the Program

Command Line:
> java -jar CircuitSim.jar circuitFile [testFile or input]

Examples:

> java -jar CircuitSim.jar AND
	Loads the circuit file "AND.txt" and prints a truth table
	(up to 256 lines).  The names of circuit files must start
	with letters, so a name like 1BitAlu.txt is not allowed,
	but alu1Bit.txt is allowed. 
	
> java -jar CircuitSim.jar XOR 01
	Loads the circuit file "XOR.txt" and runs it with the inputs
	0 and 1, printing the results. The program uses the fact that
	"01" starts with a binary digit to decide that it is an input
	rather than a test file.
	
> java -jar CircuitSim.jar MYCIRC MyTest
	Loads the circuit file "MYCIRC.txt", and runs the tests
	from "MyTest.txt" on it, printing out the results.

------------------------------------------------------------------------------

File Format using Truth Tables

The input to CircuitSim is specified in a text file.  A circuit
file name must begin with a letter and end in ".txt".  A valid circuit
file may contain the following parts:

1) A list of inputNames
2) A list of outputNames
3) A truth table OR
4) An internal circuit specification and list of outputs
5) A propagation delay

The simplest circuit specification uses a truth table.
For example, the file "NAND.txt" below specifies a NAND gate using
a truth table:

    # NAND gate: C = ~(A&B)

    inputNames { A, B }
    outputNames { C }

    truthTable {
    0 0, 1
    0 1, 1
    1 0, 1
    1 1, 0
	}
	
	propagationDelay { 1 }
	
In the example above, "inputNames" specifies the set of
inputs to the circuit, and "outputNames" specifies the
set of outputs.
	
"truthTable" lists the circuit output for all possible inputs
The order of the table is inputs, followed by outputs, as
previously specified--in this case, (A B, C).  Puncuation,
such as the (,) is optional.

"propagationDelay" gives a propagation delay for the circuit.
This only needs to be specified when a truth table is given.
The propagation delay for composite circuits will be computed.
This should have one propagation delay for each output name.

The (#) character indicates a comment.

------------------------------------------------------------------------------

File Format using Subcircuits

A more complicated specification allows a circuit to be
build out of other circuit files.  The name of a circuit
file is important, since a circuit is referenced using
the file name.  Only one circuit can be specified per file.
The file "NOT.txt" below shows a NOT gate made from a
NAND gate (specified in NAND.txt):

	# NOT gate: B = ~A, made from a NAND gate

	inputNames { A }
	outputNames { B }

	circuit NAND ~A { A, A }

	outputs { ~A.C }

A circuit specification, starting with the keyword "circuit"
lists a subunit of the current circuit, and declares the
inputs to that subunit.  The statement "circuit NAND ~A { A, A }"
specifies to include a NAND subunit, names it "~A", 
and specifies that its two inputs are both "A" (taken from 
the inputs to the circuit).  Physically, you can think of 
connecting the single input "A" to both inputs of the 
NAND gates inside the unit, which we give the name "~A".  
More formally, a circuit subunit is specified by:

1) The keyword "circuit"

2) circuit type, as specified in the file "type.txt".
   (e.g. "NAND" refers to "NAND.txt")
   If this file does not exist, an error occurs.
   The program will look in the same directory where the
   initial file (specified on the command line) is located.
   
3) The circuit instance name.  Thus, the circuit type 
   is like the "type" of a circuit variable, and the
   circuit name is the name of a circuit instance variable.
   
4) inputs to a circuit instance are specified in the 
   order that they are given in the circuit type file.  For example, 
   if the circuit type file has the line "inputNames { X, Y }", then
   two inputs must be specified, and they will be connected to 
   the X and Y inputs of the subunit, respectively.
   Inputs to a subunit may be 
      1) inputs from the main circuit,
      2) outputs from other subunits, or 
      3) the constants 0 or 1.  
	  
5) We specify which output from a subunit to use with dot notation, 
   for example, "~A.C".  The output specifier is optional if
   a circuit has only one output.   Thus, "~A", and "~A.C" are
   equivalent if ~A has only one output.  No spaces are
   allowed in a subunit name, or between the subunit name and
   dot, or dot and output field.  
   
6) The circuit subunits will be simulated in the order specified
   in the file.  By default, inputs to a given subunit must come from 
   previously included subunits; otherwise an error is produced.
   This functionality can be overridden by using "..." for the
   list of inputs, and then later adding a "circuitInputs" line
   for the same subunit (see DLATCH example).
   
7) CircuitSim has a fairly flexible naming convention for
   inputs and outputs.  Names can be standard identifiers,
   but may also include a number of atypical symbols, including
   ~, &, |, (, ), !, and ^.  This allows you to construct boolean
   expressions as identifiers, such as: (A^B)&~C.  Keep in mind
   that spaces are not allowed, and the dot has a special
   meaning, however. To avoid confusion, you should also not 
   begin the name of an identifier with a digit.
   
8) Square brackets act as a macro system. If two numbers are specified
   between the square brackets, separated by a colon, the macro system
   will replace the original token with multiple tokens including 
   a range of values.  This is in some ways 
   like the slice operator in Python.  For example, the input string
   A[1:3] will be replaced by the three tokens A1, A2 and A3.
   Counting works backwards as well, so B[7:5] yields
   B7, B6 and B5.  This can be very useful for circuits with
   many inputs or many outputs.  No spaces are allowed
   in the token specification.

9) The macro system can also be used for simple repeats by
   placing a single value in the square brackets.  For example,
   HI[5] yields HI HI HI HI HI, and 0[2] yields 0 0.  This can
   be particularly useful when you need to plug in a single 
   value into many inputs. In this mode, the square brackets
   must come at the end of the identifier, so HI[5] is allowed,
   but [5]HI is not.

10) The outputs of the circuit are specified using the keyword
   "outputs".  These must use the same order as the outputNames at 
   the beginning of the file.  As an example, the line 
   "outputs { nand1.C }" connects the "C" output from the "nand1" 
   subunit to the output of the circuit. If the circuit had five outputs, 
   five connections would be required.

------------------------------------------------------------------------------

Keyword List

Keywords in CircuitSim are specified in camelCase, and begin with
a lower case letter.  These cannot be used as the names of identifiers.
The folling are keywords in CircuitSim:

	inputNames - names and sets number of input wires to unit
	outputNames - names and sets number of output wires to unit
	truthTable - specifies the function of the unit as a truth table
	propagationDelay - specifies the propagation delay for a truth table
	circuit - specifies a subunit from another file, and its inputs
	circuitInputs - delayed specification of inputs for a subunit
	outputs - gives connections between subunits and circuit outputs
	testCase - indicates a test case in a test file
		
------------------------------------------------------------------------------	
		
Test Cases:

Test cases for a circuit are written in text files.  This allows
you to spot check circuits that are too big to test exhaustively.
The test file is then specified as a second command line parameter.
Within the test file, which must have the suffix ".txt", a test
case is given by a set of inputs, followed by a set of desired outputs.
Each input and output is given as a '0' or '1' character.  Spaces
are mostly ignored, as well as punctuation, but there must be
at least one space between the inputs and desired outputs.  
As an example, the following is a set of 4 test cases for an AND gate:

	# AND test cases
	testCase { 00, 0 }
	testCase { 01, 0 }
	testCase { 10, 0 }
	testCase { 11, 1 } 
	
Just like with the circuit files, The (#) character indicates a
comment.

Test cases can also be annotated using ## at the beginning of lines
before the test case.  These annotations will show up in the output.
For example:

    ## 0 | 0 test case
    testCase { 00, 0 }

------------------------------------------------------------------------------	
EXAMPLE CIRCUITS
------------------------------------------------------------------------------	

	# AND made from 2 NAND gates
	
	inputNames { a, b }
	outputNames { c }
	
	circuit NAND ~(a&b) { a, b }
	circuit NAND (a&b) { ~(a&b), ~(a&b) }

    # Alternate specification for (a&b) using macros
    # circuit NAND (a&b) { ~(a&b)[2] }
	
	outputs { (a&b) }
	
------------------------------------------------------------------------------	

	# WIRE (useful for renaming things) : a=a, using a 1 constant
	
	inputNames { a }
	outputNames { b }
	
	circuit AND a&1 { a, 1 } # Using constant
	
	outputs { a&1 }

------------------------------------------------------------------------------	
	
	# XOR gate: c = a^b, made from AND, OR and NOT gates,
	# using the formula a^b = (a&~b) | (b&~a)
	# Assumes the existence of "AND.txt", "OR.txt", and "NOT.txt"
	
	inputNames { a, b }
	outputNames { c }

	circuit NOT ~a { a }
	circuit NOT ~b { b }
	circuit AND a&~b { a, ~b }
	circuit AND b&~a { b, ~a }
	circuit OR a^b { a&~b, b^~a }

	outputs { a^b }
	
------------------------------------------------------------------------------	

	# HALF ADDER: a and b are addends
    # co = a & b (carry out)
	# sum = a ^ b 
	
	inputNames { a, b }
	outputNames { co, sum }

	circuit AND a&b { a, b }
    circuit XOR a^b { a, b }
	
	outputs { a&b, a^b }

------------------------------------------------------------------------------	

	# XOR4 gate: c = a^b^c^d
	# Constructs a 4-way XOR gate from 3 2-way XOR gates

	inputNames { a, b, c, d }
	outputNames { e }

	circuit XOR x1 { a, b }
	circuit XOR x2 { c, d }
	circuit XOR x3 { x1, x2 }

    # Alternate specification for x3 using macros
    # circuit XOR x3 { x[1:2] }

	outputs { x3 }
	
------------------------------------------------------------------------------
	
	# D LATCH
	# Not a combinatorial circuit.  Uses "..." and "circuitInputs"
	
	inputNames { D, clk }
	outputNames { Q }
	
	circuit NOT ~D { D }
	circuit AND and1 { D, clk }
	circuit AND and2 { ~D, clk }
	circuit NOR ~Q { ... } # "..." means inputs specified later
	circuit NOR Q { ~Q, and2 }
	circuitInputs NOR ~Q { Q, and1 }

	outputs { Q }
	
------------------------------------------------------------------------------	
EXAMPLE TEST CASES
------------------------------------------------------------------------------	

	# Test cases for Half Adder (a,b) -> (co,sum)
	testCase { 00, 00 }
	testCase { 01, 01 }
	testCase { 10, 01 }
	testCase { 11, 10 }


	# Test cases for XOR4 (a,b,c,d) -> a^b^c^d with annotations

    ## XOR4 with all 0000
	testCase { 0000, 0 }

    ## XOR4 with one 1101 
	testCase { 1101, 1 }
	
------------------------------------------------------------------------------
	